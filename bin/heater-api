#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Heater API Server. An OpenStack ReST API to Heater.
"""

import eventlet
eventlet.monkey_patch(os=False)

import os
import sys
import traceback

# If ../heat/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'heater', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from heater.openstack.common import gettextutils

gettextutils.install('heater', lazy=False)

from oslo.config import cfg

from heater.common import config
from heater.common import wsgi

from heater.openstack.common import log as logging

LOG = logging.getLogger('heater.api')

if __name__ == '__main__':
    try:
        cfg.CONF(project='heater', prog='heater-api')
        cfg.CONF.default_log_levels = ['amqplib=WARN',
                                       'qpid.messaging=INFO',
                                       'keystone=INFO',
                                       'eventlet.wsgi.server=WARN',
                                       ]
        logging.setup('heater')

        app = config.load_paste_app()

        port = cfg.CONF.heater_api.bind_port
        host = cfg.CONF.heater_api.bind_host
        LOG.info('Starting Heat HTR Service on %s:%s' % (host, port))
        server = wsgi.Server()
        server.start(app, cfg.CONF.heater_api, default_port=port)
        server.wait()
    except RuntimeError as e:
        print("StackTrace: %s", traceback.format_exc())
        sys.exit("ERROR: %s" % e)
